diff --git a/addon/column-definition.coffee b/addon/column-definition.coffee
new file mode 100644
index 0000000..a16d00e
--- /dev/null
+++ b/addon/column-definition.coffee
@@ -0,0 +1,109 @@
+`import Ember from 'ember';`
+
+ColumnDefinition = Ember.Object.extend
+
+  ###
+  # ---------------------------------------------------------------------------
+  # API - Inputs
+  # ---------------------------------------------------------------------------
+  ###
+
+  ###
+  Name of the column, to be displayed in the header.
+  TODO(new-api): Change to `columnName`
+  ###
+  headerCellName: undefined
+
+  ###
+  Path of the content for this cell. If the row object is a hash of keys
+  and values to specify data for each column, `contentPath` corresponds to
+  the key.
+  ###
+  contentPath: undefined
+
+  ###
+  Minimum column width. Affects both manual resizing and automatic resizing
+  (in `forceFillColumns` mode).
+  ###
+  minWidth: undefined
+
+  ###
+  Maximum column width. Affects both manual resizing and automatic resizing
+  (in `forceFillColumns` mode).
+  ###
+  maxWidth: undefined
+
+  ###
+  Default column width. Specifies the initial width of the column; if the
+  column is later resized automatically, it will be proportional to this.
+  ###
+  defaultColumnWidth: 150
+
+  ### Whether the column can be manually resized. ###
+  isResizable:  yes
+
+  ###
+  Whether the column can be rearranged with other columns. Only matters if
+  the table's `enableColumnReorder` property is set to true (the default).
+  TODO(new-api): Rename to `isReorderable`
+  ###
+  isSortable:  yes
+
+  ###
+  Alignment of the text in the cell. Possible values are "left", "center",
+  and "right".
+  ###
+  textAlign: 'text-align-right'
+
+  ###
+  Whether the column can automatically resize to fill space in the table.
+  Only matters if the table is in `forceFillColumns` mode.
+  ###
+  canAutoResize: yes
+
+  ###
+  TODO(new-api): Remove `headerCellViewClass`
+  Override to specify a custom view to use for the header cell.
+  ###
+  headerCellView:       'Ember.Table.HeaderCell'
+  headerCellViewClass:  Ember.computed.alias 'headerCellView'
+
+  ###
+  TODO(new-api): Remove `tableCellViewClass`
+  Override to specify a custom view to use for table cells.
+  ###
+  tableCellView:        'Ember.Table.TableCell'
+  tableCellViewClass:   Ember.computed.alias 'tableCellView'
+
+  ###
+  Override to customize how the column gets data from each row object.
+  Given a row, should return a formatted cell value, e.g. $20,000,000.
+  ###
+  getCellContent: (row) ->
+    path = @get 'contentPath'
+    Ember.assert "You must either provide a contentPath or override " +
+      "getCellContent in your column definition", path?
+    Ember.get row, path
+
+  ###
+  Override to maintain a consistent path to update cell values.
+  Recommended to make this a function which takes (row, value) and updates
+  the row value.
+  ###
+  setCellContent: Ember.K
+
+  ###
+  # ---------------------------------------------------------------------------
+  # Internal properties
+  # ---------------------------------------------------------------------------
+  ###
+
+  ###
+  Internal: width of the column.
+  TODO: Rename to `width`
+  ###
+  columnWidth:  Ember.computed.oneWay 'defaultColumnWidth'
+
+  resize: (width) -> @set 'columnWidth', width
+
+`export default ColumnDefinition`
\ No newline at end of file
diff --git a/addon/components/ember-table.coffee b/addon/components/ember-table.coffee
new file mode 100644
index 0000000..ec7c606
--- /dev/null
+++ b/addon/components/ember-table.coffee
@@ -0,0 +1,449 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+`import ResizeHandlerMixin from 'ember-cli-ember-table/mixins/resize-handler-mixin';`
+`import RowArrayController from 'ember-cli-ember-table/controllers/row';`
+
+EmberTableComponent = Ember.Component.extend StyleBindingsMixin, ResizeHandlerMixin,
+  layoutName: 'components/ember-table'
+  classNames:        ['ember-table-tables-container']
+  classNameBindings: ['enableContentSelection:ember-table-content-selectable']
+
+  ###
+  # ---------------------------------------------------------------------------
+  # API - Inputs
+  # ---------------------------------------------------------------------------
+  ###
+
+  ###
+  Values which are bound to the table's style attr. See
+  `Ember.StyleBindingsMixin` documentation for more details.
+  ###
+  styleBindings:     ['height']
+
+  ###
+  An array of row objects. Usually a hash where the keys are column names and
+  the values are the rows's values. However, could be any object, since each
+  column can define a function to return the column value given the row
+  object. See `Ember.Table.ColumnDefinition.getCellContent`.
+  ###
+  content: null
+
+  ###
+  An array of column definitions: see `Ember.Table.ColumnDefinition`. Allows
+  each column to have its own configuration.
+  ###
+  columns: null
+
+  ###
+  The number of fixed columns on the left side of the table. Fixed columns
+  are always visible, even when the table is scrolled horizontally.
+  ###
+  numFixedColumns: 0
+
+  ###
+  The number of footer rows in the table. Footer rows appear at the bottom of
+  the table and are always visible.
+  TODO(new-api): Rename to `numFooterRows`
+  ###
+  numFooterRow: 0
+
+  ###
+  The row height in pixels. A consistent row height is necessary to calculate
+  which rows are being shown, to enable lazy rendering.
+  TODO: Currently must be kept in sync with the LESS file.
+  ###
+  rowHeight: 30
+
+  ###
+  The minimum header height in pixels. Headers will grow in height if given
+  more content than they can display.
+  TODO: Currently must be kept in sync with the LESS file.
+  ###
+  minHeaderHeight: 30
+
+  ###
+  The footer height in pixels.
+  TODO: Currently must be kept in sync with the LESS file.
+  ###
+  footerHeight: 30
+
+  ### Enables or disables the header block. ###
+  hasHeader: yes
+
+  ###
+  Enables or disables the footer block.
+  TODO(new-api): Default to no
+  ###
+  hasFooter: yes
+
+  ###
+  If true, columns with `canAutoResize=true` (the default setting) will
+  attempt to fill the width of the table when possible. After a column is
+  manually resized, any other columns with `canAutoResize=true` will
+  distribute the change in width between them. Once manually resized, a
+  column will no longer automatically resize.
+  ###
+  forceFillColumns: no
+
+  ###
+  Allow the columns to be rearranged by drag-and-drop. Only columns with
+  `isSortable=true` (the default setting) will be affected.
+  ###
+  enableColumnReorder: yes
+
+  ### Allow users to select the content of table cells. ###
+  enableContentSelection: no
+
+  ###
+  Sets which row selection behavior to follow. Possible values are 'none'
+  (clicking on a row does nothing), 'single' (clicking on a row selects it
+  and deselects other rows), and 'multiple' (multiple rows can be selected
+  through ctrl/cmd-click or shift-click).
+  ###
+  selectionMode: 'single'
+
+  ###
+  # ---------------------------------------------------------------------------
+  # API - Outputs
+  # ---------------------------------------------------------------------------
+  ###
+
+  ###
+  An array of the rows currently selected. If `selectionMode` is set to
+  'single', the array will contain either one or zero elements.
+  ###
+  selection: Ember.computed (key, val) ->
+    if arguments.length > 1 and val
+      if @get('selectionMode') is 'single'
+        @get('persistedSelection').clear()
+        @get('persistedSelection').add(@findRow val)
+      else
+        @get('persistedSelection').clear()
+        for content in val
+          @get('persistedSelection').add(@findRow content)
+      @get('rangeSelection').clear()
+    if @get('selectionMode') is 'single'
+      return @get('_selection')?[0]?.get('content')
+    else
+      return @get('_selection').toArray().map (row) -> row.get('content')
+  .property '_selection.[]', 'selectionMode'
+
+  ###
+  # ---------------------------------------------------------------------------
+  # Internal properties
+  # ---------------------------------------------------------------------------
+  ###
+
+  init: ->
+    @_super()
+    if !$.ui then throw 'Missing dependency: jquery-ui'
+    if !$().mousewheel then throw 'Missing dependency: jquery-mousewheel'
+    if !$().antiscroll then throw 'Missing dependency: antiscroll.js'
+
+  ### TODO: Document ###
+  actions:
+    addColumn: Ember.K
+    sortByColumn: Ember.K
+
+  height: Ember.computed.alias '_tablesContainerHeight'
+
+  ###
+  TODO(new-api): eliminate view alias
+  specify the view class to use for rendering the table rows
+  ###
+  tableRowView:      'Ember.Table.TableRow'
+  tableRowViewClass: Ember.computed.alias 'tableRowView'
+
+  onColumnSort: (column, newIndex) ->
+    columns  = @get 'tableColumns'
+    columns.removeObject column
+    columns.insertAt newIndex, column
+
+  ### An array of Ember.Table.Row computed based on `content` ###
+  bodyContent: Ember.computed ->
+    Ember.Table.RowArrayController.create
+      target: this
+      parentController: this
+      container: @get('container')
+      itemController: Ember.Table.Row
+      content: @get('content')
+  .property 'content'
+
+  ### An array of Ember.Table.Row ###
+  footerContent: Ember.computed (key, value) ->
+    if value then value else Ember.A()
+  .property()
+
+  fixedColumns: Ember.computed ->
+    columns         = @get 'columns'
+    return Ember.A() unless columns
+    numFixedColumns = @get('numFixedColumns') or 0
+    columns = columns.slice(0, numFixedColumns) or []
+    @prepareTableColumns(columns)
+    columns
+  .property 'columns.@each', 'numFixedColumns'
+
+  tableColumns: Ember.computed ->
+    columns         = @get 'columns'
+    return Ember.A() unless columns
+    numFixedColumns = @get('numFixedColumns') or 0
+    columns = columns.slice(numFixedColumns, columns.get('length')) or []
+    @prepareTableColumns(columns)
+    columns
+  .property 'columns.@each', 'numFixedColumns'
+
+  prepareTableColumns: (columns) ->
+    columns.setEach 'controller', this
+
+  ###
+  # ---------------------------------------------------------------------------
+  # View concerns
+  # ---------------------------------------------------------------------------
+  ###
+
+  didInsertElement: ->
+    @_super()
+    @set '_tableScrollTop', 0
+    @elementSizeDidChange()
+
+  onResizeEnd: ->
+    ###
+    we need to put this on the run loop, because resize event came from
+    window. Otherwise, we get this warning when used in tests. You have
+    turned on testing mode, which disabled the run-loop's autorun. You
+    will need to wrap any code with asynchronous side-effects in an
+    Ember.run
+    ###
+    Ember.run this, @elementSizeDidChange
+
+  elementSizeDidChange: ->
+    return unless (@get('_state') or @get('state')) is 'inDOM'
+    @set '_width', @$().parent().outerWidth()
+    @set '_height', @$().parent().outerHeight()
+    ###
+    we need to wait for the table to be fully rendered before antiscroll can
+    be used
+    ###
+    Ember.run.next this, @updateLayout
+
+  updateLayout: ->
+    ### updating antiscroll ###
+    return unless (@get('_state') or @get('state')) is 'inDOM'
+    this.$('.antiscroll-wrap').antiscroll().data('antiscroll').rebuild();
+    @doForceFillColumns() if @get('forceFillColumns')
+
+  doForceFillColumns: ->
+    ### Expand the columns if there's extra space ###
+    totalWidth = @get '_width'
+    fixedColumnsWidth = @get '_fixedColumnsWidth'
+    tableColumns = @get 'tableColumns'
+    contentWidth = @_getTotalWidth tableColumns
+    availableContentWidth = totalWidth - fixedColumnsWidth
+    remainingWidth = availableContentWidth - contentWidth
+    columnsToResize = tableColumns.filterProperty('canAutoResize')
+    additionWidthPerColumn = Math.floor(remainingWidth / columnsToResize.length)
+    columnsToResize.forEach (column) ->
+      columnWidth = column.get('columnWidth') + additionWidthPerColumn
+      column.set 'columnWidth', columnWidth
+
+  onBodyContentLengthDidChange: Ember.observer ->
+    Ember.run.next this, -> Ember.run.once this, @updateLayout
+  , 'bodyContent.length'
+
+  ###
+  # ---------------------------------------------------------------------------
+  # Private variables
+  # ---------------------------------------------------------------------------
+  ###
+
+  _tableScrollTop:  0
+  _tableScrollLeft: 0
+
+  _width: null
+  _height: null
+  _contentHeaderHeight: null
+
+  _hasVerticalScrollbar: Ember.computed ->
+    height = @get('_height')
+    contentHeight = @get('_tableContentHeight') +
+      @get('_headerHeight') + @get('_footerHeight')
+    if height < contentHeight then yes else no
+  .property '_height', '_tableContentHeight', '_headerHeight', '_footerHeight'
+
+  _hasHorizontalScrollbar: Ember.computed ->
+    contentWidth = @get('_tableColumnsWidth')
+    tableWidth = @get('_width') - @get('_fixedColumnsWidth')
+    if contentWidth > tableWidth then yes else no
+  .property '_tableColumnsWidth', '_width', '_fixedColumnsWidth'
+
+  ### tables-container height adjusts to the content height ###
+  _tablesContainerHeight: Ember.computed ->
+    height = @get('_height')
+    contentHeight = @get('_tableContentHeight') +
+      @get('_headerHeight') + @get('_footerHeight')
+    if contentHeight < height then contentHeight else height
+  .property('_height', '_tableContentHeight', '_headerHeight', '_footerHeight')
+
+  ### Actual width of the fixed columns ###
+  _fixedColumnsWidth: Ember.computed ->
+    @_getTotalWidth @get('fixedColumns')
+  .property 'fixedColumns.@each.columnWidth'
+
+  ### Actual width of the (non-fixed) columns ###
+  _tableColumnsWidth: Ember.computed ->
+    ###
+    Hack: We add 3px padding to the right of the table content so that we can
+    reorder into the last column.
+    ###
+    contentWidth = (@_getTotalWidth @get('tableColumns')) + 3
+    availableWidth = @get('_width') - @get('_fixedColumnsWidth')
+    if contentWidth > availableWidth then contentWidth else availableWidth
+  .property 'tableColumns.@each.columnWidth', '_width', '_fixedColumnsWidth'
+
+  _rowWidth: Ember.computed ->
+    columnsWidth = @get '_tableColumnsWidth'
+    nonFixedTableWidth = @get('_tableContainerWidth') - @get('_fixedColumnsWidth')
+    return nonFixedTableWidth if columnsWidth < nonFixedTableWidth
+    columnsWidth
+  .property '_fixedColumnsWidth', '_tableColumnsWidth', '_tableContainerWidth'
+
+  ### Dynamic header height that adjusts according to the header content height ###
+  _headerHeight: Ember.computed ->
+    minHeight = @get('minHeaderHeight')
+    contentHeaderHeight = @get('_contentHeaderHeight')
+    if contentHeaderHeight < minHeight then minHeight else contentHeaderHeight
+  .property('_contentHeaderHeight', 'minHeaderHeight')
+
+  ### Dynamic footer height that adjusts according to the footer content height ###
+  _footerHeight: Ember.computed ->
+    if @get('hasFooter') then @get('footerHeight') else 0
+  .property('footerHeight', 'hasFooter')
+
+  _bodyHeight: Ember.computed ->
+    bodyHeight = @get '_tablesContainerHeight'
+    bodyHeight -= @get('_headerHeight') if @get('hasHeader')
+    bodyHeight -= @get('footerHeight') if @get('hasFooter')
+    bodyHeight
+  .property('_tablesContainerHeight', '_hasHorizontalScrollbar', '_headerHeight',
+            'footerHeight', 'hasHeader', 'hasFooter')
+
+  _tableBlockWidth: Ember.computed ->
+    @get('_width') - @get('_fixedColumnsWidth')
+  .property '_width', '_fixedColumnsWidth'
+
+  _fixedBlockWidthBinding: '_fixedColumnsWidth'
+
+  _tableContentHeight: Ember.computed ->
+    @get('rowHeight') * @get('bodyContent.length')
+  .property 'rowHeight', 'bodyContent.length'
+
+  _tableContainerWidth: Ember.computed ->
+    @get('_width')
+  .property '_width'
+
+  _scrollContainerWidth: Ember.computed ->
+    @get('_width') - @get('_fixedColumnsWidth')
+  .property '_width', '_fixedColumnsWidth'
+
+  _numItemsShowing: Ember.computed ->
+    Math.floor @get('_bodyHeight') / @get('rowHeight')
+  .property '_bodyHeight', 'rowHeight'
+
+  _startIndex: Ember.computed ->
+    numContent  = @get 'bodyContent.length'
+    numViews    = @get '_numItemsShowing'
+    rowHeight   = @get 'rowHeight'
+    scrollTop   = @get '_tableScrollTop'
+    index = Math.floor(scrollTop / rowHeight)
+    ### adjust start index so that end index doesn't exceed content length ###
+    if index + numViews >= numContent
+      index = numContent - numViews
+    if index < 0 then 0 else index
+  .property('bodyContent.length', '_numItemsShowing', 'rowHeight',
+            '_tableScrollTop')
+
+  _getTotalWidth: (columns, columnWidthPath = 'columnWidth') ->
+    return 0 unless columns
+    widths = columns.getEach(columnWidthPath) or []
+    widths.reduce ((total, w) -> total + w), 0
+
+  ###
+  # ---------------------------------------------------------------------------
+  # Selection
+  # TODO: Make private or reorganize into a new section
+  # ---------------------------------------------------------------------------
+  ###
+
+  isSelected: (row) ->
+    @get('_selection').contains row
+
+  setSelected: (row, val) ->
+    @persistSelection()
+    if val
+      @get('persistedSelection').add row
+    else
+      @get('persistedSelection').remove row
+
+  ###
+  rows that were selected directly or as part of a previous
+  range selection (shift-click)
+  ###
+  persistedSelection: Ember.computed -> new Ember.Set()
+
+  ### rows that are part of the currently editable range selection ###
+  rangeSelection: Ember.computed -> new Ember.Set()
+
+  _selection: Ember.computed ->
+    @get('persistedSelection').copy().addEach(@get('rangeSelection'))
+  .property 'persistedSelection.[]', 'rangeSelection.[]'
+
+  click: (event) ->
+    row = @getRowForEvent event
+    return unless row
+    return if @get('selectionMode') is 'none'
+    if @get('selectionMode') is 'single'
+      @get('persistedSelection').clear()
+      @get('persistedSelection').add row
+    else
+      if event.shiftKey
+        @get('rangeSelection').clear()
+
+        lastIndex = @rowIndex(@get('lastSelected'))
+        curIndex  = @rowIndex(@getRowForEvent(event))
+
+        minIndex  = Math.min(lastIndex, curIndex)
+        maxIndex  = Math.max(lastIndex, curIndex)
+
+        @get('rangeSelection').addObjects @get('bodyContent').slice(minIndex, maxIndex + 1)
+      else
+        if !event.ctrlKey && !event.metaKey
+          @get('persistedSelection').clear()
+          @get('rangeSelection').clear()
+        else
+          @persistSelection()
+        if @get('persistedSelection').contains row
+          @get('persistedSelection').remove row
+        else
+          @get('persistedSelection').add row
+        @set('lastSelected', row)
+
+  findRow: (content) ->
+    for row in @get('bodyContent')
+      if row.get('content') is content
+        return row
+
+  rowIndex: (row) ->
+    @get('bodyContent')?.indexOf(row)
+
+  persistSelection: () ->
+    @get('persistedSelection').addEach(@get('rangeSelection'))
+    @get('rangeSelection').clear()
+
+  getRowForEvent: (event) ->
+    $rowView = $(event.target).parents('.ember-table-table-row')
+    view     = Ember.View.views[$rowView.attr('id')]
+    view.get 'row' if view
+
+Ember.Handlebars.helper('ember-table', EmberTableComponent)
+
+`export default EmberTableComponent;`
\ No newline at end of file
diff --git a/addon/controllers/row.coffee b/addon/controllers/row.coffee
new file mode 100644
index 0000000..3d71ae3
--- /dev/null
+++ b/addon/controllers/row.coffee
@@ -0,0 +1,17 @@
+`import Ember from 'ember';`
+
+Row = Ember.ObjectProxy.extend
+  content: null
+
+  isSelected: Ember.computed (key, val) ->
+    if arguments.length > 1
+      @get('parentController').setSelected this, val
+    @get('parentController').isSelected this
+  .property 'parentController._selection.[]'
+
+  isShowing:  yes
+
+  isHovered:   no
+
+
+`export default Row`
\ No newline at end of file
diff --git a/addon/row.coffee b/addon/row.coffee
new file mode 100644
index 0000000..b00b0b8
--- /dev/null
+++ b/addon/row.coffee
@@ -0,0 +1,16 @@
+`import Ember from 'ember';`
+
+Row = Ember.ObjectProxy.extend
+  content: null
+
+  isSelected: Ember.computed (key, val) ->
+    if arguments.length > 1
+      @get('parentController').setSelected this, val
+    @get('parentController').isSelected this
+  .property 'parentController._selection.[]'
+
+  isShowing:  yes
+
+  isHovered:   no
+
+`export default Row`
\ No newline at end of file
diff --git a/addon/views/body-table-container.coffee b/addon/views/body-table-container.coffee
new file mode 100644
index 0000000..e620f2b
--- /dev/null
+++ b/addon/views/body-table-container.coffee
@@ -0,0 +1,37 @@
+`import Ember from 'ember';`
+`import MouseWheelHandlerMixin from 'ember-cli-ember-table/mixins/mouse-wheel-handler-mixin';`
+`import TouchMoveHandlerMixin from 'ember-cli-ember-table/mixins/touch-move-handler-mixin';`
+`import ScrollHandlerMixin from 'ember-cli-ember-table/mixins/scroll-handler-mixin';`
+`import ShowHorizontalScrollMixin from 'ember-cli-ember-table/mixins/show-horizontal-scroll-mixin';`
+`import TableContainer from 'ember-cli-ember-table/views/table-container';`
+
+BodyTableContainer = TableContainer.extend MouseWheelHandlerMixin,
+TouchMoveHandlerMixin, ScrollHandlerMixin, ShowHorizontalScrollMixin,
+  templateName:   'body-container'
+  classNames:     ['ember-table-table-container', 'ember-table-body-container',
+                   'antiscroll-wrap']
+  height:         Ember.computed.alias 'controller._bodyHeight'
+  width:          Ember.computed.alias 'controller._width'
+  scrollTop:      Ember.computed.alias 'controller._tableScrollTop'
+  scrollLeft:     Ember.computed.alias 'controller._tableScrollLeft'
+  scrollElementSelector: '.antiscroll-inner'
+
+  ### `event` here is a jQuery event ###
+  onScroll: (event) ->
+    @set 'scrollTop', event.target.scrollTop
+    event.preventDefault()
+
+  ### `event` here is a jQuery event ###
+  onMouseWheel: (event, delta, deltaX, deltaY) ->
+    return unless Math.abs(deltaX) > Math.abs(deltaY)
+    scrollLeft = @$('.ember-table-right-table-block').scrollLeft() + deltaX
+    @set 'scrollLeft', scrollLeft
+    event.preventDefault()
+
+  onTouchMove: (event, deltaX, deltaY) ->
+    return unless (Math.abs(deltaX) > Math.abs(deltaY))
+    scrollLeft = @$('.ember-table-right-table-block').scrollLeft() + deltaX
+    @set 'scrollLeft', scrollLeft
+    event.preventDefault()
+
+`export default BodyTableContainer`
\ No newline at end of file
diff --git a/addon/views/column-sortable-indicator.coffee b/addon/views/column-sortable-indicator.coffee
new file mode 100644
index 0000000..85b4a78
--- /dev/null
+++ b/addon/views/column-sortable-indicator.coffee
@@ -0,0 +1,11 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+ColumnSortableIndicator = Ember.View.extend StyleBindingsMixin,
+  classNames: 'ember-table-column-sortable-indicator'
+  classNameBindings: 'controller._isShowingSortableIndicator:active'
+  styleBindings: ['left', 'height']
+  left:   Ember.computed.alias 'controller._sortableIndicatorLeft'
+  height: Ember.computed.alias 'controller._height'
+
+`export default ColumnSortableIndicator`
\ No newline at end of file
diff --git a/addon/views/footer-table-container.coffee b/addon/views/footer-table-container.coffee
new file mode 100644
index 0000000..a042684
--- /dev/null
+++ b/addon/views/footer-table-container.coffee
@@ -0,0 +1,35 @@
+`import Ember from 'ember';`
+`import MouseWheelHandlerMixin from 'ember-cli-ember-table/mixins/mouse-wheel-handler-mixin';`
+`import TouchMoveHandlerMixin from 'ember-cli-ember-table/mixins/touch-move-handler-mixin';`
+`import ShowHorizontalScrollMixin from 'ember-cli-ember-table/mixins/show-horizontal-scroll-mixin';`
+`import TableContainer from 'ember-cli-ember-table/views/table-container';`
+
+FooterTableContainer = TableContainer.extend MouseWheelHandlerMixin,
+TouchMoveHandlerMixin, ShowHorizontalScrollMixin,
+  templateName:   'footer-container'
+  classNames:     ['ember-table-table-container',
+                   'ember-table-fixed-table-container',
+                   'ember-table-footer-container']
+  styleBindings:  'top'
+  height:         Ember.computed.alias 'controller.footerHeight'
+  width:          Ember.computed.alias 'controller._tableContainerWidth'
+  scrollLeft:     Ember.computed.alias 'controller._tableScrollLeft'
+  top: Ember.computed ->
+    headerHeight  = @get 'controller._headerHeight'
+    contentHeight = @get('controller._tableContentHeight') + headerHeight
+    bodyHeight    = @get('controller._bodyHeight') + headerHeight
+    if contentHeight < bodyHeight then contentHeight else bodyHeight
+  .property('controller._bodyHeight', 'controller._headerHeight'
+            'controller._tableContentHeight')
+
+  onMouseWheel: (event, delta, deltaX, deltaY) ->
+    scrollLeft = @$('.ember-table-right-table-block').scrollLeft() + deltaX
+    @set 'scrollLeft', scrollLeft
+    event.preventDefault()
+
+  onTouchMove: (event, deltaX, deltaY) ->
+    scrollLeft = @$('.ember-table-right-table-block').scrollLeft() + deltaX
+    @set 'scrollLeft', scrollLeft
+    event.preventDefault()
+
+`export default FooterTableContainer`
\ No newline at end of file
diff --git a/addon/views/header-block.coffee b/addon/views/header-block.coffee
new file mode 100644
index 0000000..209ba21
--- /dev/null
+++ b/addon/views/header-block.coffee
@@ -0,0 +1,12 @@
+`import Ember from 'ember';`
+`import TableBlock from 'ember-cli-ember-table/views/table-block';`
+
+HeaderBlock = Ember.Table.TableBlock.extend
+  classNames:    ['ember-table-header-block']
+  itemViewClass: 'Ember.Table.HeaderRow'
+
+  content: Ember.computed ->
+    [@get('columns')]
+  .property 'columns'
+
+`export default HeaderBlock`
\ No newline at end of file
diff --git a/addon/views/header-cell.coffee b/addon/views/header-cell.coffee
new file mode 100644
index 0000000..ef8f09a
--- /dev/null
+++ b/addon/views/header-cell.coffee
@@ -0,0 +1,71 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+HeaderCell = Ember.View.extend StyleBindingsMixin,
+
+  ###
+  # ---------------------------------------------------------------------------
+  # API - Inputs
+  # ---------------------------------------------------------------------------
+  ###
+
+  ###
+  TODO: Doc
+  templateName:       'header-cell'
+  classNames:         ['ember-table-cell', 'ember-table-header-cell']
+  classNameBindings:  ['column.isSortable:sortable', 'column.textAlign']
+  styleBindings:      ['width', 'height']
+  ###
+
+  ###
+  # ---------------------------------------------------------------------------
+  # Internal properties
+  # ---------------------------------------------------------------------------
+  ###
+
+  column:         Ember.computed.alias 'content'
+  width:          Ember.computed.alias 'column.columnWidth'
+  height: Ember.computed ->
+    @get('controller._headerHeight')
+  .property('controller._headerHeight')
+
+  ### jQuery UI resizable option ###
+  resizableOption: Ember.computed ->
+    handles: 'e'
+    minHeight: 40
+    minWidth: @get('column.minWidth') || 100
+    maxWidth: @get('column.maxWidth') || 500
+    grid:     @get('column.snapGrid')
+    resize: jQuery.proxy(@onColumnResize, this)
+    stop: jQuery.proxy(@onColumnResize, this)
+
+  didInsertElement: ->
+    @elementSizeDidChange()
+    if @get('column.isResizable')
+      @$().resizable(@get('resizableOption'))
+      @_resizableWidget = @$().resizable('widget')
+      return
+
+  ### `event` here is a jQuery event ###
+  onColumnResize: (event, ui) ->
+    @elementSizeDidChange()
+    ###
+    Special case for force-filled columns: if this is the last column you
+    resize (or the only column), then it will be reset to before the resize
+    to preserve the table's force-fill property.
+    ###
+    if @get('controller.forceFillColumns') and
+        @get('controller.columns').filterProperty('canAutoResize').length > 1
+      @set('column.canAutoResize', false)
+    @get("column").resize(ui.size.width)
+
+  elementSizeDidChange: ->
+    maxHeight = 0
+    ### TODO(Louis): This seems bad... ###
+    $('.ember-table-header-block .ember-table-content').each ->
+      thisHeight = $(this).outerHeight()
+      if thisHeight > maxHeight then maxHeight = thisHeight
+    @set 'controller._contentHeaderHeight', maxHeight
+    return
+
+`export default HeaderCell`
\ No newline at end of file
diff --git a/addon/views/header-row.coffee b/addon/views/header-row.coffee
new file mode 100644
index 0000000..afbad19
--- /dev/null
+++ b/addon/views/header-row.coffee
@@ -0,0 +1,60 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+###
+We hacked this. There is an inconsistency at the level in which we are
+handling scroll event...
+###
+HeaderRow = Ember.View.extend StyleBindingsMixin,
+  templateName:   'header-row'
+  classNames:     ['ember-table-table-row', 'ember-table-header-row']
+  styleBindings: ['width']
+  columns:        Ember.computed.alias 'content'
+  width:          Ember.computed.alias 'controller._rowWidth'
+  scrollLeft:     Ember.computed.alias 'controller._tableScrollLeft'
+
+  ### Options for jQuery UI sortable ###
+  sortableOption: Ember.computed ->
+    axis: 'x'
+    containment: 'parent'
+    cursor: 'move'
+    helper: 'clone'
+    items: ".ember-table-header-cell.sortable"
+    opacity: 0.9
+    placeholder: 'ui-state-highlight'
+    scroll: true
+    tolerance: 'intersect'
+    update: jQuery.proxy(@onColumnSortDone,   this)
+    stop:   jQuery.proxy(@onColumnSortStop,   this)
+    sort:   jQuery.proxy(@onColumnSortChange, this)
+
+  onScrollLeftDidChange: Ember.observer ->
+    @$().scrollLeft @get('scrollLeft')
+  , 'scrollLeft'
+
+  didInsertElement: ->
+    @_super()
+    if @get('controller.enableColumnReorder')
+      @$('> div').sortable(@get('sortableOption'))
+
+  onScroll: (event) ->
+    @set 'scrollLeft', event.target.scrollLeft
+    event.preventDefault()
+
+  onColumnSortStop: (event, ui) ->
+    @set 'controller._isShowingSortableIndicator', no
+
+  onColumnSortChange: (event, ui) ->
+    left = @$('.ui-state-highlight').offset().left -
+           @$().closest('.ember-table-tables-container').offset().left
+    @set 'controller._isShowingSortableIndicator', yes
+    @set 'controller._sortableIndicatorLeft', left
+
+  onColumnSortDone: (event, ui) ->
+    newIndex = ui.item.index()
+    view     = Ember.View.views[ui.item.attr('id')]
+    column   = view.get 'column'
+    @get('controller').onColumnSort column, newIndex
+    @set 'controller._isShowingSortableIndicator', no
+
+`export default HeaderRow`
\ No newline at end of file
diff --git a/addon/views/header-table-container.coffee b/addon/views/header-table-container.coffee
new file mode 100644
index 0000000..7217f9b
--- /dev/null
+++ b/addon/views/header-table-container.coffee
@@ -0,0 +1,13 @@
+`import Ember from 'ember';`
+`import ShowHorizontalScrollMixin from 'ember-cli-ember-table/mixins/show-horizontal-scroll-mixin';`
+`import TableContainer from 'ember-cli-ember-table/views/table-container';`
+
+HeaderTableContainer = TableContainer.extend ShowHorizontalScrollMixin,
+  templateName: 'header-container'
+  classNames:   ['ember-table-table-container',
+                 'ember-table-fixed-table-container',
+                 'ember-table-header-container']
+  height:       Ember.computed.alias 'controller._headerHeight'
+  width:        Ember.computed.alias 'controller._tableContainerWidth'
+
+`export default HeaderTableContainer`
\ No newline at end of file
diff --git a/addon/views/lazy-table-block.coffee b/addon/views/lazy-table-block.coffee
new file mode 100644
index 0000000..5762627
--- /dev/null
+++ b/addon/views/lazy-table-block.coffee
@@ -0,0 +1,18 @@
+`import Ember from 'ember';`
+`import LazyContainerView from 'ember-cli-ember-table/views/lazy-container';`
+
+LazyTableBlock = LazyContainerView.extend
+  classNames:       ['ember-table-table-block']
+  styleBindings:    ['width']
+  itemViewClass:    Ember.computed.alias 'controller.tableRowViewClass'
+  rowHeight:        Ember.computed.alias 'controller.rowHeight'
+  columns:    null
+  content:    null
+  scrollLeft: null
+  scrollTop:  null
+
+  onScrollLeftDidChange: Ember.observer ->
+    @$().scrollLeft @get('scrollLeft')
+  , 'scrollLeft'
+
+`export default LazyTableBlock`
diff --git a/addon/views/scroll-container.coffee b/addon/views/scroll-container.coffee
new file mode 100644
index 0000000..b7f03cb
--- /dev/null
+++ b/addon/views/scroll-container.coffee
@@ -0,0 +1,36 @@
+`import Ember from 'ember';`
+`import ScrollHandlerMixin from 'ember-cli-ember-table/mixins/scroll-handler-mixin';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+ScrollContainer = Ember.View.extend StyleBindingsMixin, ScrollHandlerMixin,
+  templateName: 'scroll-container'
+  classNames:     ['ember-table-scroll-container']
+  styleBindings:  ['left', 'width', 'height']
+  scrollElementSelector: '.antiscroll-inner'
+  width:          Ember.computed.alias 'controller._scrollContainerWidth'
+  ### 10 is the height of the horizontal scrollbar ###
+  height:         10
+  left:           Ember.computed.alias 'controller._fixedColumnsWidth'
+  scrollTop:      Ember.computed.alias 'controller._tableScrollTop'
+  scrollLeft:     Ember.computed.alias 'controller._tableScrollLeft'
+
+  ###
+  HACK: onScrollLeftDidChange will not fire unless scrollLeft has been get
+  at least once. Therefore, we want to call onScrollLeftDidChange in
+  didInsertElement
+  ###
+  didInsertElement: ->
+    @_super()
+    @onScrollLeftDidChange()
+
+  ### `event` here is a jQuery event ###
+  onScroll: (event) ->
+    @set 'scrollLeft', event.target.scrollLeft
+    event.preventDefault()
+
+  onScrollLeftDidChange: Ember.observer ->
+    selector = @get('scrollElementSelector')
+    @$(selector).scrollLeft @get('scrollLeft')
+  , 'scrollLeft', 'scrollElementSelector'
+
+`export default ScrollContainer`
\ No newline at end of file
diff --git a/addon/views/scroll-panel.coffee b/addon/views/scroll-panel.coffee
new file mode 100644
index 0000000..fba29ac
--- /dev/null
+++ b/addon/views/scroll-panel.coffee
@@ -0,0 +1,10 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+ScrollPanel = Ember.View.extend StyleBindingsMixin,
+  classNames:     ['ember-table-scroll-panel']
+  styleBindings:  ['width', 'height']
+  width:   Ember.computed.alias 'controller._tableColumnsWidth'
+  height:  Ember.computed.alias 'controller._tableContentHeight'
+
+`export default ScrollPanel`
\ No newline at end of file
diff --git a/addon/views/table-block.coffee b/addon/views/table-block.coffee
new file mode 100644
index 0000000..dfa07af
--- /dev/null
+++ b/addon/views/table-block.coffee
@@ -0,0 +1,21 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+### TODO: This should be a mixin ###
+TableBlock = Ember.CollectionView.extend StyleBindingsMixin,
+  classNames:     ['ember-table-table-block']
+  styleBindings:  ['width', 'height']
+  itemViewClass:  Ember.computed.alias 'controller.tableRowViewClass'
+  columns: null
+  content: null
+  scrollLeft: null
+
+  onScrollLeftDidChange: Ember.observer ->
+    @$().scrollLeft @get('scrollLeft')
+  , 'scrollLeft'
+
+  height: Ember.computed ->
+    @get('controller._headerHeight')
+  .property('controller._headerHeight')
+
+`export default TableBlock`
diff --git a/addon/views/table-cell.coffee b/addon/views/table-cell.coffee
new file mode 100644
index 0000000..0d46454
--- /dev/null
+++ b/addon/views/table-cell.coffee
@@ -0,0 +1,61 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+TableCell = Ember.View.extend StyleBindingsMixin,
+
+  ###
+  # ---------------------------------------------------------------------------
+  # API - Inputs
+  # ---------------------------------------------------------------------------
+  ###
+
+  ###
+  TODO: Doc
+  templateName:       'table-cell'
+  classNames:         ['ember-table-cell']
+  classNameBindings:  'column.textAlign'
+  styleBindings:      'width'
+  ###
+
+  ###
+  # ---------------------------------------------------------------------------
+  # Internal properties
+  # ---------------------------------------------------------------------------
+  ###
+
+  init: ->
+    @_super()
+    @contentPathDidChange()
+    @contentDidChange()
+
+  row:        Ember.computed.alias 'parentView.row'
+  column:     Ember.computed.alias 'content'
+  width:      Ember.computed.alias 'column.columnWidth'
+
+  contentDidChange: ->
+    @notifyPropertyChange 'cellContent'
+
+  contentPathWillChange: (->
+    contentPath = @get 'column.contentPath'
+    if contentPath
+      @removeObserver("row.#{contentPath}", this, this.contentDidChange)
+  ).observesBefore 'column.contentPath'
+
+  contentPathDidChange: (->
+    contentPath = this.get 'column.contentPath'
+    if contentPath
+      @addObserver("row.#{contentPath}", this, this.contentDidChange)
+  ).observesBefore 'column.contentPath'
+
+  cellContent: Ember.computed (key, value) ->
+    row     = @get 'row'
+    column  = @get 'column'
+    return unless row and column
+    if arguments.length is 1
+      value = column.getCellContent row
+    else
+      column.setCellContent row, value
+    value
+  .property 'row.isLoaded', 'column'
+
+`export default TableCell`
\ No newline at end of file
diff --git a/addon/views/table-container.coffee b/addon/views/table-container.coffee
new file mode 100644
index 0000000..2cd4304
--- /dev/null
+++ b/addon/views/table-container.coffee
@@ -0,0 +1,8 @@
+`import Ember from 'ember';`
+`import StyleBindingsMixin from 'ember-cli-ember-table/mixins/style-bindings-mixin';`
+
+TableContainer = Ember.View.extend StyleBindingsMixin,
+  classNames:     ['ember-table-table-container']
+  styleBindings:  ['height', 'width']
+
+`export default TableContainer`
\ No newline at end of file
diff --git a/addon/views/table-row.coffee b/addon/views/table-row.coffee
new file mode 100644
index 0000000..5e96fa9
--- /dev/null
+++ b/addon/views/table-row.coffee
@@ -0,0 +1,31 @@
+`import Ember from 'ember';`
+`import LazyItemView from 'ember-cli-ember-table/views/lazy-item';`
+
+TableRow = LazyItemView.extend
+  templateName:   'table-row'
+  classNames:     'ember-table-table-row'
+  classNameBindings: ['row.isHovered:ember-table-hover', 'row.isSelected:ember-table-selected',
+                      'row.rowStyle', 'isLastRow:ember-table-last-row']
+  styleBindings:  ['width', 'height']
+  row:      Ember.computed.alias 'content'
+  columns:  Ember.computed.alias 'parentView.columns'
+  width:    Ember.computed.alias 'controller._rowWidth'
+  height:   Ember.computed.alias 'controller.rowHeight'
+
+  isLastRow: Ember.computed ->
+    @get('row') is @get('controller.bodyContent.lastObject')
+  .property 'controller.bodyContent.lastObject', 'row'
+
+  mouseEnter: (event) ->
+    row = @get 'row'
+    row.set 'isHovered', yes if row
+
+  mouseLeave: (event) ->
+    row = @get 'row'
+    row.set 'isHovered', no if row
+
+  teardownContent: ->
+    row = @get 'row'
+    row.set 'isHovered', no if row
+
+`export default TableRow`
\ No newline at end of file
